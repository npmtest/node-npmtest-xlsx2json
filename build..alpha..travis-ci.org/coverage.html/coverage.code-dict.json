{"/home/travis/build/npmtest/node-npmtest-xlsx2json/test.js":"/* istanbul instrument in package npmtest_xlsx2json */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-xlsx2json/lib.npmtest_xlsx2json.js":"/* istanbul instrument in package npmtest_xlsx2json */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_xlsx2json = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_xlsx2json = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-xlsx2json/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-xlsx2json && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_xlsx2json */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_xlsx2json\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_xlsx2json.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_xlsx2json.rollup.js'] =\n            local.assetsDict['/assets.npmtest_xlsx2json.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_xlsx2json.__dirname + '/lib.npmtest_xlsx2json.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-xlsx2json/node_modules/xlsx2json/lib/xlsx2json.js":"/*\n * xlsx2json\n * Copyright (c) 2014-2016 daikiueda, @ue_di\n * Licensed under the MIT license.\n * https://github.com/daikiueda/xlsx2json\n */\n\n'use strict';\n\nconst Xlsx = require('xlsx'),\n    Csv = require('csv-parse'),\n    Utils = require('./private/Utils.js');\n\n\n/**\n * @param {String} pathToXlsx\n * @param {Object} [options]\n *   @param {Number|undefined} [options.sheet]\n *   @param {Number} [options.keysRow]\n *   @param {Object} [options.mapping]\n *   @param {Number} [options.dataStartingRow]\n * @returns {Promise}\n */\nfunction convertXlsxToJson(pathToXlsx, options = {}) {\n    return new Promise((resolve, reject) => {\n        let workbook,\n            sheets;\n\n        try {\n            workbook = Xlsx.readFile(pathToXlsx);\n        } catch (e) {\n            return reject(e);\n        }\n\n        sheets = pickSheetsFromWorkbook(workbook, options.sheet);\n\n        Promise.all(sheets.map(sheet => {\n            return new Promise((resolve, reject) => {\n                Csv(Xlsx.utils.sheet_to_csv(sheet), (err, records) => {\n                    if (err) {\n                        return reject(err);\n                    }\n\n                    const jsonValueArray = [];\n\n                    let dataStartingRow = options.dataStartingRow || 1,\n                        mapping = {},\n                        mappingRow,\n                        formattingMethod;\n\n                    if (options.keysRow) {\n                        mappingRow = records.splice(options.keysRow - 1, 1)[0];\n\n                        if (dataStartingRow && dataStartingRow > options.keysRow) {\n                            dataStartingRow -= 1;\n                        }\n\n                        mappingRow.forEach((value, index) => {\n                            if (value) {\n                                mapping[value] = index + 1;\n                            }\n                        });\n                    }\n\n                    mapping = Object.assign(mapping, options.mapping);\n\n                    formattingMethod = Object.keys(mapping).length ?\n                        Utils.formatRecordByMapping : Utils.formatRecordByColumnLabel;\n\n                    records.slice(dataStartingRow - 1).forEach(recode => {\n                        jsonValueArray.push(formattingMethod(recode, mapping));\n                    });\n\n                    resolve(jsonValueArray);\n                });\n            });\n        }))\n            .then(jsonValueArrays => {\n                if (options.sheet !== undefined && jsonValueArrays.length === 1) {\n                    resolve(jsonValueArrays[0]);\n                } else {\n                    resolve(jsonValueArrays);\n                }\n            })\n            .catch(reject);\n    });\n}\n\n\n/**\n * @param {Xlsx.Workbook} workbook\n * @param {String|Number|Array<String>|Array<Number>} cond\n * @return {Array}\n */\nfunction pickSheetsFromWorkbook(workbook, cond) {\n    switch (typeof cond) {\n        case 'string':\n            if (workbook.Sheets[cond]) {\n                return [workbook.Sheets[cond]];\n            }\n            break;\n\n        case 'number':\n            if (workbook.SheetNames[cond]) {\n                return [workbook.Sheets[workbook.SheetNames[cond]]];\n            }\n            break;\n\n        case 'object':\n            if (cond instanceof Array) {\n                return cond.reduce((results, subCond) => {\n                    results = results.concat(pickSheetsFromWorkbook(workbook, subCond));\n                    return results;\n                }, []);\n            }\n            break;\n\n        case 'undefined':\n        default:\n            return workbook.SheetNames.map(sheetName => workbook.Sheets[sheetName]);\n    }\n    throw Error(`Sheet is not found: ${cond}`);\n}\n\n\n/**\n * @param {String} pathToXlsx\n * @param {Object|Function} [options]\n * @param {function(error, Array<Object>)} [callback]\n * @returns {Promise}\n */\nmodule.exports = function xlsx2json(pathToXlsx, options, callback) {\n    return new Promise((resolve, reject) => {\n        const argTypes = Array.from(arguments).slice(0, 3)\n            .map(value => typeof value).join(',');\n        let errorMessage;\n\n        switch (argTypes) {\n            case ['string'].join(','):\n            case ['string', 'object'].join(','):\n                callback = () => {};\n                break;\n\n            case ['string', 'function'].join(','):\n                callback = arguments[1];\n                options = undefined;\n                break;\n\n            case ['string', 'object', 'function'].join(','):\n                break;\n\n            default:\n                errorMessage = 'Any arguments is invalid type';\n                throw new TypeError(errorMessage);\n        }\n\n        convertXlsxToJson(pathToXlsx, options)\n            .then(jsonValueArray => {\n                callback(null, jsonValueArray);\n                resolve(jsonValueArray);\n            })\n            .catch(error => {\n                callback(error, null);\n                reject(error);\n            });\n    });\n};\n","/home/travis/build/npmtest/node-npmtest-xlsx2json/node_modules/xlsx2json/lib/private/Utils.js":"/*\n * xlsx2json utilities\n * Copyright (c) 2014-2016 daikiueda, @ue_di\n * Licensed under the MIT license.\n * https://github.com/daikiueda/xlsx2json\n */\n\n'use strict';\n\nconst memoize = require('memoizee');\n\n\n/**\n * 順序を表す文字列（アルファベット）を、整数に変換して返却する。\n * ex. 'A' -> 1, 'AA' -> 27\n * @private\n * @param {String|Number} ordinalAlphabet 順序を表す文字列または数値。ex. 'A', 'AA' | 1, '2'\n * @returns {Number} 順序を表す整数\n */\nconst toOrdinalNumber = memoize(function toOrdinalNumber(ordinalAlphabet) {\n\n    const intFromArg = parseInt(ordinalAlphabet, 10);\n\n    if (!isNaN(intFromArg) && intFromArg > 0 && intFromArg == ordinalAlphabet) {\n        return intFromArg;\n    }\n\n    if (/^[a-zA-Z]+$/.test(ordinalAlphabet)) {\n        return ordinalAlphabet.toUpperCase().split('').reverse()\n            .map(function(value, digit) {\n                return (value.charCodeAt(0) - 'A'.charCodeAt(0) + 1) * Math.pow(26, digit);\n            })\n            .reduce(function(previousValue, currentValue) {\n                return previousValue + currentValue;\n            });\n    }\n\n    throw new TypeError();\n});\n\n/**\n * 整数を、順序を表すアルファベットに変換して返却する。\n * ex. 1 -> 'A', 27 -> 'AA'\n * @private\n * @param {Number|String} ordinalNumber 変換対象の整数。\n * @returns {String} 順序を表すアルファベット\n */\nconst toOrdinalAlphabet = memoize(function toOrdinalAlphabet(ordinalNumber) {\n\n    if (/^[a-zA-Z]+$/.test(ordinalNumber)) {\n        return ordinalNumber.toUpperCase();\n    }\n\n    if (parseInt(ordinalNumber, 10) != ordinalNumber || ordinalNumber <= 0) {\n        throw new TypeError();\n    }\n\n    const charOfEachDigit = [];\n\n    let digit = 1,\n        testValue = ordinalNumber;\n    do {\n        const digitValue = testValue % Math.pow(26, digit++) || 26;\n        charOfEachDigit.unshift(String.fromCharCode('A'.charCodeAt(0) + digitValue - 1));\n        testValue = (testValue - digitValue) / 26;\n    } while (testValue);\n\n    return charOfEachDigit.join('');\n});\n\n/**\n * 順序を表す数値やアルファベットを操作するためのクラス\n */\nclass Ordinal {\n    /**\n     * @param {Number|String} ordinalData\n     * @returns {Ordinal}\n     */\n    constructor(ordinalData) {\n        if (!ordinalData || !/^([0-9]+|[a-zA-z]+)$/.test(ordinalData) || ordinalData <= 0) {\n            throw new TypeError(ordinalData);\n        }\n\n        /**\n         * @private\n         * @type {Number|String}\n         */\n        this.ordinalData = ordinalData;\n    }\n\n    /** @returns {Number} */\n    toNumber() {return toOrdinalNumber(this.ordinalData);}\n\n    /** @returns {String} */\n    toAlphabet() {return toOrdinalAlphabet(this.ordinalData);}\n}\n\n/**\n * recodeの内容を、Excel上のカラム表示（A, B, ...）にあわせてオブジェクトに格納し返却する。\n * @param {Array} recode カラム順にレコードの内容を格納した配列\n * @returns {Object}\n */\nfunction formatRecordByColumnLabel(recode) {\n    const recodeBuffer = {};\n    recode.forEach(function(value, index) {\n        recodeBuffer[new Ordinal(index + 1).toAlphabet()] = value;\n    });\n    return recodeBuffer;\n}\n\n/**\n * recordの内容を、mappingで対応づけられたKey名にあわせてオブジェクトに格納し返却する。\n * @param {Array} recode カラム順にレコードの内容を格納した配列\n * @param {Object} mapping key名とカラム位置の対応を示すオブジェクト（{key名: カラム位置, ...}）\n * @returns {Object}\n */\nfunction formatRecordByMapping(recode, mapping) {\n    return Object.keys(mapping).reduce((formatted, keyName) => {\n        if (mapping[keyName] !== 0) {\n            formatted[keyName] = recode[new Ordinal(mapping[keyName]).toNumber() - 1];\n        }\n        return formatted;\n    }, {});\n}\n\n\nmodule.exports = {\n    Ordinal: Ordinal,\n    formatRecordByColumnLabel: formatRecordByColumnLabel,\n    formatRecordByMapping: formatRecordByMapping\n};\n"}